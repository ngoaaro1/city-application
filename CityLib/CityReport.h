/**
 * @file CityReport.h
 *
 * @author Aaron Ngo
 *
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
 */

#pragma once

#include <memory>
#include <vector>
#include <random>
#include <list>

class City;
class MemberReport;

/**
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
*/
class CityReport
{
private:
    /// The city this report is for
    City* mCity;

    /// Random number generator
    std::mt19937 mRandom;

protected:
    /// Size of the bins in the linked list
    static const int BinSize = 7;

    /// A bin stores up to 7 city reports in a
    /// single linked list node.
    class ReportsBin {
    public:
        /// A place to store the reports in this bin
        /// Up to 7 reports can be stored, followed by
        /// a null pointer after the last report pointer.
        std::shared_ptr<MemberReport> mReports[BinSize+1];

        bool IsFull();
        void Add(std::shared_ptr<MemberReport> report);
    };

    /// The collection of reports
    std::list<std::shared_ptr<ReportsBin>> mReportBins;

public:
    explicit CityReport(City* city);

    void Add(std::shared_ptr<MemberReport> report);

    /**
     * Iterator class for city report to iterate over mCityReports
     * and ReportsBin's mReports
     */
    class Iter
    {
    public:
        /**
         * Constructor
         * @param cityReport
         * @param pos Position of inside the bin
         * @param iterator Iterator for the mReportsBin
         */
        Iter(CityReport *cityReport, int pos, std::list<std::shared_ptr<ReportsBin>>::iterator iterator) :
            mCityReport(cityReport), mPos(pos), mIterator(iterator) {}
        /**
         * Test for end of the iterator and if the individual report
         * is not NULL
         * @param other
         * @return True if this iterator equals not equal to the other iterator
         */
        bool operator!=(const Iter &other) const
        {
            return ((mIterator != other.mIterator) && (mIterator->get()->mReports[mPos] != nullptr));
        }
        /**
         * Get value at current position and iterator
         * @return shared_ptr of MemberReport at iterator and position
         */
        std::shared_ptr<MemberReport> operator *() const { return mIterator->get()->mReports[mPos]; }
        /**
         * Increment the position and iterator
         * Reset position when position has hit BinSize
         * @return Reference to this iterator
         */
        const Iter& operator++()
        {
            mPos += 1;
            if (mPos >= BinSize) {
                mPos = 0;
                mIterator++;
            }
            
            return *this;
        }
    private:
        /// CityReport object we are iterating over
        CityReport *mCityReport;
        /// Current position in the bin
        int mPos;
        /// Position in the mReportBins
        std::list<std::shared_ptr<ReportsBin>>::iterator mIterator;
    };

    /**
     * Get an iterator for the beginning of the collection
     * @return Iter object for the beginning of the collection
     */
    Iter begin() { return Iter(this, 0, mReportBins.begin() ); }

    /**
     * Get an iterator for the end of the collection
     * @return Iter object for the end of the collection
     */
    Iter end() { return Iter(this, BinSize, mReportBins.end() ); }


};

